
/*
 * File:			main.cpp
 *
 * Description:  	Main program code for using microcontrollers to
 *                  program SigmaDSP processors.
 *
 * This software is distributed in the hope that it will be useful,
 * but is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * This software may only be used to program products purchased from
 * Analog Devices for incorporation by you into audio products that
 * are intended for resale to audio product end users. This software
 * may not be distributed whole or in any part to third parties.
 *
 * Copyright ï¿½ 2020 Analog Devices, Inc. All rights reserved.
 */

#include <Arduino.h>

#include "SigmaStudioFiles/SigmaStudioFW.h"
#include "SigmaStudioFiles/USER_SETTINGS.h"

#if USE_SPI
#include <SPI.h>
#else
#include <Wire.h>
#endif

// CHANGE THESE IDENTIFIERS TO MATCH YOUR EXPORTED PROJECT FILE(S)
#if DSP_TYPE == DSP_TYPE_SIGMA100
#include "SigmaStudioFiles/Simple_SS_Project_170x_IC_1.h"
#include "SigmaStudioFiles/Simple_SS_Project_170x_IC_1_PARAM.h"
#elif DSP_TYPE == DSP_TYPE_SIGMA200
#include "SigmaStudioFiles/Simple_SS_Project_176x_IC_1.h"
#include "SigmaStudioFiles/Simple_SS_Project_176x_IC_1_PARAM.h"
#elif DSP_TYPE == DSP_TYPE_SIGMA300_350
#include "SigmaStudioFiles/Simple_SS_Project_145x_146x_IC_1.h"
#include "SigmaStudioFiles/Simple_SS_Project_145x_146x_IC_1_PARAM.h"
#endif

// Function prototypes
void DSP_HARD_RESET();

/**
 * This setup function is responsible for initializing hardware libraries.
 */
void setup() {
    delay(1000);              // 1 second startup delay
    Serial.begin(115200);    // Initialize the USB serial port for debug

#if USE_SPI                            // Initialize SPI library and toggle DSP into SPI mode
    pinMode(18, INPUT);                // Set the I2C SDA pin high-impedance to avoid contention with SPI
    pinMode(19, INPUT);                // Set the I2C SCL pin high-impedance to avoid contention with SPI
    digitalWrite(DSP_SS_PIN, HIGH);    // Set SPI slave select line to initialize high
    pinMode(DSP_SS_PIN, OUTPUT);       // Enable SPI slave select pin
    SPI.begin();                       // Initialize the SPI library

#else    // Initialize I2C library
    pinMode(10, OUTPUT);         // Drive ADDR0 low for Sigma300/350; pinMode defaults to logic low
    pinMode(11, OUTPUT);         // Drive ADDR0 low for Sigma300/350; pinMode defaults to logic low
    pinMode(12, INPUT);          // Set the SPI MISO pin high-impedance to avoid contention with I2C
    pinMode(13, INPUT);          // Set the SPI SCLK pin high-impedance to avoid contention with I2C
    Wire.begin();                // Initialize I2C library
    Wire.setClock(I2C_SPEED);    // Set I2C SCL frequency based on the value in USER_SETTINGS.h

#endif
}    // End of setup

void loop() {
    // Drive Pin 6 of the USBi connector low to reset the DSP and SPI toggle if necessary.
    DSP_HARD_RESET();

    // default_download_IC_1, generated by SigmaStudio, will download the SigmaStudio program and start up the
    // DSP. It relies on a proper SPI or I2C implementation in SIGMASTUDIOFW.cpp, which must be tailored to
    // the individual processor. and assigning pins correctly in USER_SETTINGS.h.
    default_download_IC_1();

	
    // Wait 10 seconds, then re-program the DSP again
    delay(10000);
}    // End of loop

void DSP_HARD_RESET() {
    pinMode(DSP_RESET_PIN, OUTPUT);
    digitalWrite(DSP_RESET_PIN, LOW);
    delay(10);
    digitalWrite(DSP_RESET_PIN, HIGH);
    // This delay accounts for ADM811T reset generator hold time on ADAU1467 eval board, adjust
    // as needed
    delay(560);
#if USE_SPI
    // Toggle the DSP into SPI mode by pulling the /SS pin low, then high, 3 times.
    for (uint8_t i = 0; i < 3; i++) {
        digitalWrite(DSP_SS_PIN, LOW);
        delayMicroseconds(10);
        digitalWrite(DSP_SS_PIN, HIGH);
        delayMicroseconds(10);
    }
#endif
}